import os
import subprocess
from shutil import copyfile
from shutil import rmtree


# TODO: Move from the ruby compilation of sass into a python module to remove the sass gem requirement
# TODO: Use external sass compilation rather then relying on dist css.
class CSSGenerator(object):
    SCSS_FILENAME = "OpenSeaLab.scss"
    SASS_CACHE_DIRNAME = ".sass-cache"
    OUTPUT_FILENAME = "styles.css"
    OUTPUT_MINIFIED_FILENAME = "styles.min.css"
    OUTPUT_MAP_FILENAME = OUTPUT_FILENAME + ".map"

    def __init__(self, is_debug=False, root_directory="../private/scss/", output_directory="../OpenSeaLab/templates/",
                 yui_compressor_path="../private/external/yuicompressor/yuicompressor-2.4.8.jar"):
        self.root_directory = root_directory
        self.output_directory = output_directory
        self.is_debug = is_debug
        self.yui_compressor_path = yui_compressor_path
        self.external_css_repositories = []

    def add_external_css_repository(self, repository_path):
        self.external_css_repositories.append(repository_path)

    # Normally I would parse all scss files and generate multiple css files, however we only want one so it stays cached
    def compile_sass(self):
        """ I know shell = True is a security exception, however on Windows we need it to be active in order for
            subprocess to function as intended. The problem is due to the fact that python on windows is not able
            to resolve %PATH% variables which are extensive. I.E. Java is resolved because you have:
            JAVA_PATH = JAVA = PATH; Sass is a gem of ruby so you need a resolver from ruby->sass, and without
            shell=True this doesnt work.

            On a positive note, this is ok since we're in the deploy script simply to generate minified css
        """
        subprocess.call(["sass", self.root_directory + self.SCSS_FILENAME, self.root_directory + self.OUTPUT_FILENAME],
                        shell=True)

    def copy_css_output_to_output_directory(self):
        copyfile(self.root_directory + self.OUTPUT_FILENAME, self.output_directory + self.OUTPUT_FILENAME)

    def clean_up(self):
        # Remove the output css and map files as they do not belong in the sass folder
        try:
            os.remove(self.root_directory + self.OUTPUT_FILENAME)
            os.remove(self.root_directory + self.OUTPUT_MAP_FILENAME)
            rmtree(
                self.SASS_CACHE_DIRNAME)  # The sass-cache generated by invoking the sass gem is located in the callee's folder. Therefore we need to remove it here
        except OSError as e:
            print("Error: %s - %s." % (e.filename, e.strerror))

    def minify_output_css(self):
        if not self.is_debug:
            css_file = self.output_directory + self.OUTPUT_FILENAME
            compress_command = "java -jar \"{0}\" \"{1}\" --type \"css\" -o \"{2}{3}\"".format(self.yui_compressor_path,
                                                                                               css_file,
                                                                                               self.output_directory,
                                                                                               self.OUTPUT_MINIFIED_FILENAME)
            op = os.popen(compress_command)
        else:
            pass

    def merge_remote_css_repositories_into_minified_bundle(self, is_debug=False):
        for repo in self.external_css_repositories:
            files = [f for f in os.listdir(repo)]
            for local_file in files:
                if is_debug:
                    pass
                else:
                    if local_file.endswith("min.css"):
                        with open(os.path.join(repo, local_file), "r") as input_data:
                            self.append_to_output(input_data.read())

    def append_to_output(self, data):
        with open(self.output_directory + self.OUTPUT_FILENAME, "a") as output:
            output.write(data)

    def run(self):
        self.compile_sass()
        self.copy_css_output_to_output_directory()
        self.minify_output_css()
        self.clean_up()
        self.merge_remote_css_repositories_into_minified_bundle()


if __name__ == "__main__":
    CSSGenerator = CSSGenerator()
    CSSGenerator.add_external_css_repository(os.path.abspath("../node_modules/materialize-css/dist/css/"))
    CSSGenerator.run()
